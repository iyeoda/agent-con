### App Framework UI Design Overview

1. **Navigation & Active States**
   - Active states are indicated subtly through icon color changes to orange (#D15F36)
   - Text remains in the default slate color (#4C5760) for both active and inactive states
   - No background colors or borders are used for active states
   - Hover states consistently use a light gray background (bg-gray-50) with light gray border (border-gray-200)
   - This pattern is consistent across navigation, settings, and interactive elements
   - Transitions are smooth using transition-all for both background and border changes

2. **Sidebar**
   - A vertical sidebar with icons for "Dashboard," "Data," "AI Agents," and "Settings."
   - Icons are displayed with tooltips that reveal the name of each section when hovered.
   - Sidebar expands on hover to reveal text labels next to the icons.
   - Active state indicated by orange icon color (#D15F36)

3. **Top Bar**
   - Contains the app logo and the active project name ("Woodside").
   - A search button (with an orange icon) opens a modal to handle complex queries.
   - The modal provides a text area for multi-line input and filter options for the search.

4. **Search Modal**
   - Triggered when the search button is clicked.
   - Includes an input field for the search query and options to filter by categories such as Projects, Documents, AI Agents, etc.
   - The modal is styled to match the overall app, with no background dimming.
   - Results are grouped into categories: Documents, Tasks, and Projects, each with links for more details.

5. **Modals & Popovers**
   - Modals use the Radix UI Dialog component for accessibility and consistent behavior.
   - Modals have clean white backgrounds with rounded corners (rounded-lg) and subtle borders (border-[#A7CEBC]).
   - No heavy background dimming to maintain a light, airy feel of the application.
   - Popovers for contextual actions use Radix UI Popover component.
   - Popover content has consistent styling: white background, subtle shadow, border-[#A7CEBC], and rounded corners.
   - All interactive elements within modals and popovers follow the global hover pattern.

6. **Selectors & Dropdown Menus**
   - Dropdown menus use Radix UI primitives for consistent behavior and accessibility
   - Menu triggers and items share consistent hover state (bg-gray-50) with border highlight (border-gray-200)
   - Menu items use rounded corners (rounded-md) and consistent padding (px-3 py-2)
   - Items have transparent borders by default to prevent layout shift on hover
   - Items maintain text color (text-[#4C5760]) for better readability
   - Orange accent color reserved for active/selected states only
   - Minimum width of 12rem ensures content fits comfortably
   - Text wraps naturally to handle longer content using whitespace-normal and break-words
   - Focus states match hover states for keyboard navigation
   - Smooth transitions using transition-all for all interactive states

7. **Command Menu Integration**
   - Command menus (CMDK) are implemented using a combination of Radix UI Dialog and CMDK primitives
   - Selection states use aria-selected attributes instead of data-selected to avoid conflicts
   - Keyboard navigation is handled through CMDK's built-in handlers
   - Styling follows the app's design system while maintaining CMDK's functionality
   - Event handlers use onSelect instead of onClick for better keyboard support
   - Command menu items maintain consistent hover and focus states
   - Dialog overlay uses z-index coordination to prevent conflicts
   - Command menu state is managed independently from other UI components

8. **Calendar Components**
   - **View Types**:
     - Month, Week, and List views with consistent styling and behavior
     - Each view type maintains the same color scheme and interaction patterns
     - Views are responsive and adapt to different screen sizes
     - Current date is highlighted with a subtle background (bg-[#3A366E] bg-opacity-5)
   
   - **Event Display**:
     - Events use color-coded badges based on type:
       - Deadlines: Red (bg-red-100 text-red-800)
       - Milestones: Orange (bg-[#D15F36] bg-opacity-20 text-[#D15F36])
       - Meetings: Blue (bg-blue-100 text-blue-800)
       - Tasks: Mint (bg-[#A7CEBC] bg-opacity-30 text-[#3A366E])
     - Event badges show title and optional time
     - Hover states use opacity changes for subtle interaction
     - Click events open detailed event dialogs
   
   - **Navigation**:
     - Previous/Next buttons for date navigation
     - "Today" button to quickly return to current date
     - View type switcher with active state indication
     - Date range display adapts to current view type
   
   - **Filters**:
     - Multi-select filters for event types, priorities, and assignees
     - Filter badges show active filter count
     - Clear filters option when any filters are active
     - Command-based search for team member selection
   
   - **Event Management**:
     - Add Event dialog with comprehensive form
     - Event Details dialog for viewing and editing
     - Consistent form styling across all dialogs
     - Team member selection with avatar initials
     - Tag management with comma-separated input
   
   - **Responsive Design**:
     - Calendar adapts to different screen sizes
     - Mobile-friendly touch targets
     - Scrollable views for overflow content
     - Maintains readability at all breakpoints

9. **Development & Debugging**
   - Console logging is strictly development-only using environment checks
   - Debug logs are wrapped in a helper function:
     ```typescript
     const debugLog = (...args: any[]) => {
       if (process.env.NODE_ENV === 'development') {
         console.log('[Component Name]:', ...args);
       }
     };
     ```
   - Log messages are prefixed with component name for easy filtering
   - State changes and event handlers include detailed logging
   - Production builds automatically exclude debug logs
   - Debug logs focus on:
     - Component mount/unmount
     - State updates
     - Event handling
     - Data fetching
     - Error conditions
   - Performance monitoring logs are kept separate from debug logs

10. **Styling**
    - The color scheme includes:
      - Indigo (#3A366E) for primary UI elements and emphasis
      - Orange (#D15F36) for active states and key actions
      - Mint (#A7CEBC) for borders and subtle accents
      - Slate (#4C5760) for regular text content
      - Light gray (gray-50) for hover states
      - Light gray (gray-200) for hover borders
    - Text hierarchy:
      - Indigo for headings and emphasis
      - Slate for regular content
      - Consistent text sizes (text-sm for menu items, text-xs for subtle text)
    - Elements are spaced neatly and are responsive
    - Avatars maintain perfect circles using aspect-square and overflow handling
    - Avatar text and images are properly centered and scaled
    - Consistent hover states across all interactive elements
    - Smooth transitions for all interactive states

11. **Component Architecture**
    - **Separation of concerns**: UI components are isolated in dedicated files with specific functionality.
    - **Reusability**: Components like ProjectSelector are designed to be reused across the application with consistent behavior.
    - **Future-proofing**: Components are built with backend integration in mind:
      - API calls can be added inside components
      - Parent components can fetch data and pass as props
      - Loading states and error handling are implemented within components
    - **Maintainability**: Changes to specific functionality (like project selection) are contained to a single file.
    - **Type Safety**: Components use TypeScript interfaces to ensure proper prop usage and data handling.
    - **Accessibility**: 
      - Components leverage Radix UI primitives for keyboard navigation
      - Focus management follows WCAG guidelines
      - Proper ARIA attributes are maintained
      - Interactive elements have appropriate focus indicators
      - Color contrast meets accessibility standards

12. **Data Management & API Integration**
    - **Type System**:
      - Centralized type definitions in `src/types/index.ts`
      - Comprehensive interfaces for all entities (Project, Agent, Person, Company)
      - Strong typing for API requests and responses
      - Type-safe data operations throughout the application
    
    - **Mock Data Organization**:
      - Domain-specific mock data files in `src/mock-data/`
      - Each mock file imports corresponding types
      - Realistic data with proper relationships
      - Consistent structure matching API responses
    
    - **Service Layer**:
      - Base API service with common functionality
      - Domain-specific services for each entity type
      - Consistent error handling and authentication
      - Type-safe API operations
      - Centralized data fetching logic
    
    - **API Integration**:
      - Axios-based API client with interceptors
      - Token-based authentication handling
      - Automatic error handling for unauthorized access
      - Consistent API response structure
      - Environment-based configuration
      - Secure OAuth2 flow implementation for CDE connections
      - Type-safe response handling with generics
    
    - **Authentication & Security**:
      - Secure token storage using AuthService
      - OAuth2 flow for third-party integrations
      - Provider-specific token management
      - Automatic token refresh handling
      - Secure token removal on disconnection
      - Type-safe token operations
    
    - **CDE Connection Management**:
      - Comprehensive CRUD operations for connections
      - Secure OAuth2 flow initiation and callback handling
      - Connection testing and validation
      - Automated data synchronization
      - Provider-specific token management
      - Type-safe connection operations
      - Error handling for invalid connections
    
    - **State Management**:
      - Local state for UI interactions
      - Service-based data fetching
      - Optimistic updates support
      - Error state handling
      - Loading state management
      - Secure token state management
      - Connection state synchronization

13. **Testing Strategy**
    - Components include test scenarios for both mock and real data
    - Error states and loading behaviors are testable
    - Mock data provides consistent test cases
    - Integration tests can swap mock data for API calls
    - E2E tests can use mock data for predictable scenarios

14. **Toast Notifications**
    - **Usage Guidelines**:
      - Success toasts: Green background (bg-green-100) with success icon
        - After successful form submissions
        - When operations complete successfully (add/remove members, save settings)
        - When connections are established
      - Error toasts: Red background (bg-red-100) with error icon
        - API failures
        - Validation errors
        - Connection failures
        - Permission denied scenarios
      - Info toasts: Blue background (bg-blue-100) with info icon
        - Status updates
        - Background process completions
        - Non-critical notifications
      - Warning toasts: Yellow background (bg-yellow-100) with warning icon
        - Before destructive actions
        - Resource limitations
        - Configuration issues
    
    - **Positioning and Timing**:
      - Default position: top-right corner
      - Stack vertically with newest on top
      - Auto-dismiss after 5 seconds for success/info
      - Error/warning toasts require manual dismissal
      - Maximum 5 toasts visible at once
    
    - **Interaction**:
      - Click to dismiss
      - Hover to pause auto-dismiss timer
      - Optional action buttons for complex notifications
      - Keyboard accessible (Esc to dismiss)

15. **Mock Data Handling**
    All mutable data should be obtained from mock data. Where this does not exist it should be created.
    - **Initialization**:
      - Mock data initialized only when arrays are empty
      - Uses spread operator to create independent copies
      - Preserves data structure matching API responses
      - Maintains referential integrity between related data
    
    - **Persistence**:
      - Changes persist during the session
      - Separate storage for different entity types
      - Updates reflect immediately in UI
      - Reset on page refresh
    
    - **Type Safety**:
      - Mock data follows same interfaces as API responses
      - Type guards ensure correct data handling
      - Consistent error handling with API responses
      - Type-safe CRUD operations
    
    - **Development Features**:
      - Configurable delay simulation
      - Error scenario testing
      - Network condition simulation
      - Relationship maintenance between entities

16. **Environment Variables**
    - **Configuration**:
      - NODE_ENV: Determines runtime environment
        - 'development': Enables debug logging, mock data
        - 'production': Disables debug features
        - 'test': Enables test-specific behavior
      - REACT_APP_API_URL: Base URL for API requests
      - REACT_APP_USE_MOCK_DATA: Toggle mock data usage
      - REACT_APP_DEBUG_LEVEL: Control debug output
    
    - **Usage Guidelines**:
      - Access via process.env
      - Type-safe using TypeScript
      - Default values for development
      - Documentation required for all env vars
      - Validation on application startup
    
    - **Security**:
      - Sensitive values only in .env.local
      - No secrets in version control
      - Runtime environment validation
      - Secure handling of API keys
    
    - **Development Workflow**:
      - .env.example for documentation
      - Environment-specific configs
      - Local override support
      - CI/CD integration

17. **Organization Role Management**
    - **Multiple Role Support**:
      - Users can have multiple organization roles simultaneously
      - Roles include: 'billing_admin', 'org_admin', and 'standard'
      - At least one role must be assigned at all times
      - Role changes are managed through a dedicated interface
    
    - **Role Selection UI**:
      - Checkbox-based selection for multiple roles
      - Visual indicators for each role type:
        - Billing Admin: CreditCard icon with orange accent
        - Organization Admin: Users icon with indigo accent
        - Standard User: User icon with slate accent
      - Role badges display in member list with appropriate icons
      - Consistent styling with the app's design system
    
    - **Role Management Workflows**:
      - Add Member: Role selection during invitation process
      - Change Roles: Dedicated dialog for modifying existing roles
      - Remove Member: Confirmation dialog before removal
      - Role validation to prevent removing all roles
    
    - **Visual Hierarchy**:
      - Role badges use consistent styling with rounded corners
      - Icons provide immediate visual recognition
      - Text labels maintain readability with appropriate contrast
      - Hover states for interactive elements follow global patterns
    
    - **Accessibility Considerations**:
      - Checkbox inputs are properly labeled
      - Role changes provide appropriate feedback
      - Keyboard navigation supported for all role management actions
      - Screen reader friendly role descriptions
    
    - **State Management**:
      - Role changes trigger immediate UI updates
      - Optimistic updates for better user experience
      - Error handling for failed role changes
      - Loading states during role updates
    
    - **Data Structure**:
      - OrganizationRoles type as array of OrganizationRole
      - Consistent role identifiers across the application
      - Type-safe role operations throughout the codebase
      - Clear separation between organization roles and project roles

18. **Comments Feature Implementation**
    - **Component Architecture**:
      - `CommentsSection`: A reusable component for displaying and adding comments on any entity
      - Integrated into both `DrawingDetail` and `WorkspaceItemDetail` components
      - Follows the project's design system with consistent styling
      - Supports entity-specific comments with proper type safety
    
    - **Data Structure**:
      - `CommentableEntityType`: Union type defining entities that can have comments
        - Includes: 'drawing', 'task', 'query', 'file', 'workspace_item'
      - `Comment` interface with properties:
        - Core fields: id, content, createdAt, createdBy, updatedAt
        - Entity reference: entityType, entityId, projectId
        - Optional fields: parentId (for nested comments), mentions, attachments
      - Attachments include: id, name, url, type, and size
    
    - **Mock Data Handling**:
      - Centralized mock data in `src/mock-data/comments.ts`
      - Helper functions for generating realistic comment data
      - Functions to retrieve comments by entity, project, or user
      - Random date generation within the last 30 days for realistic timestamps
      - Proper relationships between comments and their parent entities
    
    - **UI Components**:
      - Card-based layout with consistent styling
      - Avatar display for comment authors with fallback to initials
      - Formatted timestamps using date-fns
      - Support for mentions and attachments display
      - Responsive design that works across different viewport sizes
    
    - **User Experience**:
      - Real-time comment updates (simulated with state management)
      - Loading states during data fetching
      - Error handling for failed operations
      - Empty state messaging when no comments exist
      - Form validation to prevent empty comments
    
    - **Navigation Integration**:
      - Comments accessible from entity detail views
      - Proper routing between list and detail views
      - Back navigation to return to the previous view
      - URL parameters for entity identification
    
    - **Styling Consistency**:
      - Follows the app's color scheme:
        - Indigo (#3A366E) for headings
        - Orange (#D15F36) for active elements
        - Mint (#A7CEBC) for borders
        - Slate (#4C5760) for regular text
      - Consistent spacing and typography
      - Proper hover and focus states
      - Accessible color contrast
    
    - **Future Enhancements**:
      - Rich text editing for comments
      - File upload integration
      - Real-time updates with WebSockets
      - Comment threading and replies
      - Notification system for mentions
      - Comment moderation tools
